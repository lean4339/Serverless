# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sebast4339
service: serverless-api

# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: eccomerce

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    BUCKET_NAME: my-serverless-bucket
    PRODUCTS_TABLE: ProductsTable
    SNS_TOPIC: UserNotifications
    SQS_QUEUE: ProductQueue
    USERS_TABLE: UsersTable

resources:
  Resources:
    ProductQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ProductQueue

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UserNotifications:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: UserNotifications

    SnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref UserNotifications
        Protocol: email
        Endpoint: lean4339@gmail.com

functions:
  register:
    handler: handlers/users.register
    events:
      - http:
          path: users/register
          method: post
          cors: true

  login:
    handler: handlers/users.login
    events:
      - http:
          path: users/login
          method: post
          cors: true

  createProduct:
    handler: handlers/products.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

  listProducts:
    handler: handlers/products.listProducts
    events:
      - http:
          path: products
          method: get
          cors: true

  sendNotification:
    handler: handlers/notifications.sendNotification
    events:
      - http:
          path: notifications
          method: post
          cors: true

  uploadImage:
    handler: handlers/upload.uploadImage
    events:
      - http:
          path: upload
          method: post
          cors: true

  processProductQueue:
    handler: handlers/sqsProcessor.processProductQueue
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProductQueue
              - Arn
